// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db.sqlite"
  // url      = env("DATABASE_URL")
}

// generator client {
//   provider        = "prisma-client-js"
//   previewFeatures = ["referentialIntegrity"]
// }

// datasource db {
//   provider             = "mysql"
//   url                  = env("DATABASE_URL")
//   referentialIntegrity = "prisma"
// }

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts  Account[]
  sessions  Session[]
  comments  Comment[]
  tracks    Track[]
  albums    Album[]
  playlists Playlist[]
}

model Track {
  id   String @id @default(cuid())
  name String

  url            String
  year           Int?
  auditionsCount Int

  albumId String?
  album   Album?  @relation(fields: [albumId], references: [id], onDelete: Cascade)

  genreId String?
  genre   Genre?  @relation(fields: [genreId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  artistId String?
  artist   Artist? @relation(fields: [artistId], references: [id])

  playlistId String?
  playlist   Playlist? @relation(fields: [playlistId], references: [id])
}

model Genre {
  id     String  @id @default(cuid())
  name   String
  tracks Track[]
}

model Artist {
  id     String  @id @default(cuid())
  name   String
  tracks Track[]
  albums Album[]
}

model Playlist {
  id     String  @id @default(cuid())
  name   String
  tracks Track[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Album {
  id   String @id @default(cuid())
  name String

  image String

  artistId String
  artist   Artist? @relation(fields: [artistId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tracks Track[]
}

model Comment {
  id     String @id @default(cuid())
  text   String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
